pipeline {
    //agent any
	agent {

	label 'master'

	}

	/* Here we can declare the environemnt variables */
    environment {
      CF_VERSION = '1.0'
      CF_API = ''
      DEPLOY_ENV = "${params.environment}"
      JAVA_HOME = "/usr/lib/jvm/jre-1.8.0-openjdk"
      MAVEN_HOME = "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven"
   }
    /**
     * tools to auto-install and put on the PATH
     * some of the supported tools - maven, jdk, gradle,git
     */
    tools {
        maven 'maven'
    }

    triggers {
     //Poll SCM
     pollSCM('* * * * *')
     //Buid Periodically
     //cron('* * * * *')
     //GitHub WebHook
     githubPush()

   }


   // Configure Pipeline-specific options
   options {

       // Add timestamps to output
       timestamps()
       overrideIndexTriggers(false)
       // timeout job after 60 minutes
       timeout(time: 3,unit: 'MINUTES')
       // Keep only last 5 builds
       buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
       disableConcurrentBuilds()
   }

     /**
     * stages contain one or more stage directives
     */
    stages {
         stage('CheckoutCode') {
             /*agent {
             label 'master'
             }*/
            steps {
                git branch: 'development', credentialsId: 'deploy_free', url: '*******************:8443/scm/fcomp/ctbc-sirona-customapi.git'

                sh "echo CF_VERSION ${CF_VERSION}"
            }
        }

        stage('MavenBuild') {
            steps {
               sh 'mvn clean package'
            }
        }
stage ('JaCoCoReport') {
           steps {
                jacoco (buildOverBuild: true,
                        changeBuildStatus: true,
                        deltaBranchCoverage: '80',
                        deltaClassCoverage: '80',
                        deltaComplexityCoverage: '80',
                        deltaInstructionCoverage: '80',
                        deltaLineCoverage: '80',
                        deltaMethodCoverage: '80',
                        maximumBranchCoverage: '80',
                        maximumClassCoverage: '80',
                        maximumComplexityCoverage: '80',
                        maximumInstructionCoverage: '80',
                        maximumLineCoverage: '80',
                        maximumMethodCoverage: '80',
                        minimumBranchCoverage: '80',
                        minimumClassCoverage: '80',
                        minimumComplexityCoverage: '80',
                        minimumInstructionCoverage: '80',
                        minimumLineCoverage: '80',
                        minimumMethodCoverage: '80',
                        skipCopyOfSrcFiles: true)
           }
        }
        stage('CreateDirectory') {
            steps {
                dir('/tmp/ctbc'){
                   sh "touch ctbc.txt"
                }
                }
        }
        stage('UploadArtifactIntoNexus') {
            steps {
               sh 'mvn deploy'
            }
        }

      stage('DeployApplicationIntoTomcat') {
            steps {
            // provide SSH credentials to builds via a ssh-agent in Jenkins
              sshagent(['*****']) {
                 sh "scp -o StrictHostKeyChecking=no target/ctbc-ws-client.war *****@00.00.00.00:/apps/fico/apache-tomcat-9.0.46/webapps/"
               }
            }
        }

    }



    post {
        always {
            cleanWs()
        }
        success {
              emailext to: '****@****.com',
                       subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                   body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                   replyTo: '****@****.com'

            cleanWs()
        }
        failure {
            emailext to: '****@***.com',
                     subject: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                 body: "Pipeline Build is over .. Build # is ..${env.BUILD_NUMBER} and Build status is.. ${currentBuild.result}.",
	                 replyTo: '****@***.com'
		 cleanWs()
        }
    }
}
